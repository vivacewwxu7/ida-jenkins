pipeline {
	agent any
	options {
		buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }
	parameters{
		string(name: 'IDA_URL', defaultValue: params.IDA_URL ?:'https://localhost:8443/ida', description: 'The IDA URL')
		string(name: 'IDA_LOGIN_CREDENTIAL', defaultValue: params.IDA_LOGIN_CREDENTIAL ?:'', description: 'The IDA Login Credential configured in Jenkins')
		string(name: 'PIPELINE_ID', defaultValue: params.PIPELINE_ID ?:'', description: 'The IDA pipeline Id, at least one of Pipeline Id and Pipeline Name is required.')
		string(name: 'PIPELINE_NAME', defaultValue: params.PIPELINE_NAME ?:'', description: 'The IDA pipeline Name, at least one of Pipeline Id and Pipeline Name is required.')
                string(name: 'PIPELINE_DATA', defaultValue: params.PIPELINE_DATA ?:'', description: 'The IDA pipeline build input.')
	}
	
	stages {
	
		stage('Clean Up') {
			steps {
				sh '''
				rm -rf *.html
				'''
			}
		}
		
		stage('Trigger IDA Pipeline') {
			steps {
				withCredentials([usernamePassword(credentialsId: IDA_LOGIN_CREDENTIAL, passwordVariable: 'IDA_PASSWORD', usernameVariable: 'IDA_USERNAME')]) {
					script {
						try {
							sh '''
							chmod +x pipeline.sh
							./pipeline.sh -s "${IDA_URL}" -u "${IDA_USERNAME}" -p "${IDA_PASSWORD}" -i "${PIPELINE_ID}" -n "${PIPELINE_NAME}" -d "${PIPELINE_DATA}" -o pipeline
							'''
						} catch (e) {
							echo "IDA Pipeline failed"
							throw e
						} finally {
							publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '.', reportFiles: 'pipeline.html', reportName: 'IDA Pipeline Report', reportTitles: 'IDA Pipeline Report'])    
						}
					}
				}
			}
		}	
	}
	
}
